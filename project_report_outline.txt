Name: Guidry, Joseph
Date: 04 AUG 2017
Current Module: Data Structures and Algorithms
Project Name:  File Intersect 

Project Goals:
	<A two to three sentence description of the project and its intent>
     
	- The goal of this project is to incorporate the use of data structures to implement efficient algorithms, to read words from any number of files, then find the common words and display them in alphabetical order
	
Considerations:
	<A list of considerations and conditions which affected the design of your project>
    - Implementing an Abstract Data type: I used an AVL Tree.
    - Reading a single space delimited word per entry.
    - Iterate through any number of files.
    - Output in alphabetical order.

Initial Design:
	<A paragraph or more that adequately describes your program's structure and layout discussing the various modules (.c and corresponding .h files) that you implemented>
	
	The program is structured with the avlIntersect.c as the implementation of the AVL Tree, and the
	interface, avlIntersect.h, holds all the function prototypes and structure of the tree node.  
	The insert, search and print functions have access to the data in the tree. The remaining
	functions handle the balancing of the tree to ensure a optimal search and insert speed.
	
	The intersect.c file handles the file validating and word parsing of the input data. The first
	file is inserted into a tree, and another will be made after each file is check.  The trees are 
	destroyed following the printing of the last tree to the screen. 

Data Flow:
	<A paragraph or longer describing the data flow of the program in a sequential manner.  Include a diagram when necessary.>
	
	1. Ensures the size of the files, and places the smallest in the first file argument position (argv[1]).
	2. Use the fscanf() to grab a single space delimited word from the file stream. 
	3. Insert the word into the tree.
	4. After successful insertion, tree will determine if balancing is required.
	5. Repeat 2-4
	6. If not last file, open next file in argv. Else, print tree, then free memory and exit.
	7. Take word and determine if it is a match in the tree, if there is a match, 
	   insert into a new bst.	
	8. Repeat until last file, then print the tree, free memory and exit.

Communication Protocol:
	<Discuss any custom communication protocol you have used including the various request and responses that may be sent and received.>

	None.
	
Potential Pitfalls:
	<Discuss any potential issues that you might run into while creating the project>
	
	1. Re-purposing a previously built AVL Tree with ints to handle strings.
	2. fscanf(FILE *stream, %s, char* word) - prone to buffer overflow if word is very large.
	
Test Plan:
	User Test:
 		<Describe the steps taken for each user test.>
 		1. Build usage of program getting words from a file and printing them out. 
 		2. Insert single file into a single tree, and print in-order/ pre-order.
 		3. Handle multiple files and how to build new tree from matching elements.
 		4. Handle edge cases of empty files and larger than expected words.
 		
	Test Cases:
		<A brief overview of the test cases that you implemented.>
		1. Input is normal words, and sentence structures.
		2. Input includes multiple white-space, numbers, and mixed upper/lower case letters.
		3. Use 3+ input files.  
		4. Using dictionary input to ensure efficiency of the AVL tree.
		
		
Conclusion:

	<A review of the project, what worked, what didnâ€™t and how to improve upon your project in the future.>

	This project reinforced the need and examination of the design of a program with the use of
	abstract data types, especial a binary search tree.  The idea of using any other type, like a
	linked list or array, were easy identified as a poor way to implement this solution. 
	
	These transition from integers to strings as the data type in the AVL tree, reflected on the
	process of understanding how pointers work and can be manipulated. 
	



